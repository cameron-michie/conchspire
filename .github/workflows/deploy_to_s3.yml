name: Deploy Static Site to S3

on:
  push:
    branches:
      - main
      
jobs:
  deploy-to-s3:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}

      - name: Verify AWS credentials
        run: |
          aws sts get-caller-identity

      - name: Create S3 bucket if it doesn't exist
        run: |
          echo "Checking if S3 bucket exists: ${{secrets.BUCKET_NAME}}"
          if ! aws s3api head-bucket --bucket ${{secrets.BUCKET_NAME}} 2>&1; then
            echo "Bucket does not exist. Creating bucket: ${{secrets.BUCKET_NAME}}"
            aws s3api create-bucket --bucket ${{secrets.BUCKET_NAME}} --region ${{secrets.AWS_REGION}}
            echo "Configuring bucket for static website hosting"
            aws s3api put-bucket-website --bucket ${{secrets.BUCKET_NAME}} --website-configuration '{"IndexDocument":{"Suffix":"index.html"}}'
            echo "Enabling versioning"
            aws s3api put-bucket-versioning --bucket ${{secrets.BUCKET_NAME}} --versioning-configuration '{"Status":"Enabled"}'
            echo "Configuring server-side encryption"
            aws s3api put-bucket-encryption --bucket ${{secrets.BUCKET_NAME}} --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
            echo "Bucket created and configured successfully"
          else
            echo "Bucket already exists: ${{secrets.BUCKET_NAME}}"
          fi

      - name: Deploy to S3
        run: |
          echo "Deploying to S3 bucket: ${{secrets.BUCKET_NAME}}"
          aws s3 sync ./conchspire s3://${{secrets.BUCKET_NAME}} --delete
          echo "Deployment completed successfully"

      - name: Invalidate CloudFront cache
        run: |
          echo "Invalidating CloudFront cache for distribution: ${{secrets.CLOUDFRONT_DISTRIBUTION_ID}}"
          aws cloudfront create-invalidation --distribution-id ${{secrets.CLOUDFRONT_DISTRIBUTION_ID}} --paths "/*"
          echo "Cache invalidation completed successfully"
